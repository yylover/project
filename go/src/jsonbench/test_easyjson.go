// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonbench

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson785d9294DecodeJsonbench(in *jlexer.Lexer, out *News) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "articletype":
			out.Articletype = string(in.String())
		case "src":
			out.Src = string(in.String())
		case "pubtime":
			out.PubTime = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "short_url":
			out.ShortUrl = string(in.String())
		case "bigimg":
			out.BigImg = string(in.String())
		case "flag":
			out.Flag = string(in.String())
		case "cid":
			out.Cid = string(in.String())
		case "vid":
			out.Vid = string(in.String())
		case "duration":
			out.Duration = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "reason_flag":
			out.ReasonFlag = string(in.String())
		case "pushCommentCount":
			out.PushCommentCount = int(in.Int())
		case "chlid":
			out.Chlid = string(in.String())
		case "thumbnails":
			if in.IsNull() {
				in.Skip()
				out.Thumbnails = nil
			} else {
				in.Delim('[')
				if out.Thumbnails == nil {
					if !in.IsDelim(']') {
						out.Thumbnails = make([]interface{}, 0, 4)
					} else {
						out.Thumbnails = []interface{}{}
					}
				} else {
					out.Thumbnails = (out.Thumbnails)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.Thumbnails = append(out.Thumbnails, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "thumbnails_qqnews":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailsQQnews = nil
			} else {
				in.Delim('[')
				if out.ThumbnailsQQnews == nil {
					if !in.IsDelim(']') {
						out.ThumbnailsQQnews = make([]interface{}, 0, 4)
					} else {
						out.ThumbnailsQQnews = []interface{}{}
					}
				} else {
					out.ThumbnailsQQnews = (out.ThumbnailsQQnews)[:0]
				}
				for !in.IsDelim(']') {
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					out.ThumbnailsQQnews = append(out.ThumbnailsQQnews, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "thumbnails_qqnews_attr":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ThumbnailsQQnewsAttr = make(map[string]interface{})
				} else {
					out.ThumbnailsQQnewsAttr = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.ThumbnailsQQnewsAttr)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "thumbnails_qqnews_photo":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailsQQnewsPhoto = nil
			} else {
				in.Delim('[')
				if out.ThumbnailsQQnewsPhoto == nil {
					if !in.IsDelim(']') {
						out.ThumbnailsQQnewsPhoto = make([]interface{}, 0, 4)
					} else {
						out.ThumbnailsQQnewsPhoto = []interface{}{}
					}
				} else {
					out.ThumbnailsQQnewsPhoto = (out.ThumbnailsQQnewsPhoto)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.ThumbnailsQQnewsPhoto = append(out.ThumbnailsQQnewsPhoto, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "thumbnails_qqnews_video":
			out.ThumbnailsQQnewsVideo = string(in.String())
		case "commentid":
			out.Commentid = string(in.String())
		case "picShowType":
			out.PicShowType = int(in.Int())
		case "videoId":
			out.VideoId = string(in.String())
		case "videoDuration":
			out.VideoDuration = int(in.Int())
		case "videoWatchCount":
			out.VideoWatchCount = int(in.Int())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "abstract":
			out.Abstract = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "scheme":
			out.Scheme = string(in.String())
		case "chlname":
			out.ChlName = string(in.String())
		case "chlicon":
			out.ChlIcon = string(in.String())
		case "share_url":
			out.ShareUrl = string(in.String())
		case "hasVideo":
			out.HasVideo = int(in.Int())
		case "pureVideo":
			out.PureVideo = int(in.Int())
		case "imagecount":
			out.ImageCount = int(in.Int())
		case "vexpr":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vexpr = make(map[string]string)
				} else {
					out.Vexpr = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.Vexpr)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "alg_version":
			out.AlgVersion = uint32(in.Uint32())
		case "seq_no":
			out.SeqNo = string(in.String())
		case "alginfo":
			out.AlgInfo = string(in.String())
		case "action_list":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ActionList = make(map[string]interface{})
				} else {
					out.ActionList = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.ActionList)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "video_hide_url":
			out.VideoHideUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeJsonbench(out *jwriter.Writer, in News) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"articletype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Articletype))
	}
	{
		const prefix string = ",\"src\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Src))
	}
	if in.PubTime != "" {
		const prefix string = ",\"pubtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PubTime))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.ShortUrl != "" {
		const prefix string = ",\"short_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortUrl))
	}
	if in.BigImg != "" {
		const prefix string = ",\"bigimg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BigImg))
	}
	{
		const prefix string = ",\"flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Flag))
	}
	if in.Cid != "" {
		const prefix string = ",\"cid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cid))
	}
	if in.Vid != "" {
		const prefix string = ",\"vid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Vid))
	}
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Duration))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	if in.ReasonFlag != "" {
		const prefix string = ",\"reason_flag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReasonFlag))
	}
	if in.PushCommentCount != 0 {
		const prefix string = ",\"pushCommentCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PushCommentCount))
	}
	if in.Chlid != "" {
		const prefix string = ",\"chlid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Chlid))
	}
	{
		const prefix string = ",\"thumbnails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Thumbnails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Thumbnails {
				if v7 > 0 {
					out.RawByte(',')
				}
				if m, ok := v8.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"thumbnails_qqnews\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ThumbnailsQQnews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.ThumbnailsQQnews {
				if v9 > 0 {
					out.RawByte(',')
				}
				if m, ok := v10.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ThumbnailsQQnewsAttr) != 0 {
		const prefix string = ",\"thumbnails_qqnews_attr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.ThumbnailsQQnewsAttr {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.ThumbnailsQQnewsPhoto) != 0 {
		const prefix string = ",\"thumbnails_qqnews_photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.ThumbnailsQQnewsPhoto {
				if v12 > 0 {
					out.RawByte(',')
				}
				if m, ok := v13.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"thumbnails_qqnews_video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThumbnailsQQnewsVideo))
	}
	if in.Commentid != "" {
		const prefix string = ",\"commentid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Commentid))
	}
	{
		const prefix string = ",\"picShowType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PicShowType))
	}
	if in.VideoId != "" {
		const prefix string = ",\"videoId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoId))
	}
	if in.VideoDuration != 0 {
		const prefix string = ",\"videoDuration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoDuration))
	}
	if in.VideoWatchCount != 0 {
		const prefix string = ",\"videoWatchCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoWatchCount))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	if in.Abstract != "" {
		const prefix string = ",\"abstract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Abstract))
	}
	{
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"scheme\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"chlname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChlName))
	}
	{
		const prefix string = ",\"chlicon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChlIcon))
	}
	{
		const prefix string = ",\"share_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShareUrl))
	}
	if in.HasVideo != 0 {
		const prefix string = ",\"hasVideo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HasVideo))
	}
	if in.PureVideo != 0 {
		const prefix string = ",\"pureVideo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PureVideo))
	}
	{
		const prefix string = ",\"imagecount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ImageCount))
	}
	if len(in.Vexpr) != 0 {
		const prefix string = ",\"vexpr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Vexpr {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.String(string(v14Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"alg_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.AlgVersion))
	}
	{
		const prefix string = ",\"seq_no\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SeqNo))
	}
	if in.AlgInfo != "" {
		const prefix string = ",\"alginfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AlgInfo))
	}
	if len(in.ActionList) != 0 {
		const prefix string = ",\"action_list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.ActionList {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if m, ok := v15Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.VideoHideUrl != "" {
		const prefix string = ",\"video_hide_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoHideUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v News) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeJsonbench(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v News) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeJsonbench(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *News) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeJsonbench(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *News) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeJsonbench(l, v)
}
